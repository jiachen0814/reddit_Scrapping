comment_limit,comment_sort,selftext,author_fullname,saved,gilded,clicked,title,subreddit_name_prefixed,hidden,pwls,downs,hide_score,name,quarantine,link_flair_text_color,upvote_ratio,subreddit_type,ups,total_awards_received,is_original_content,is_reddit_media_domain,is_meta,can_mod_post,score,is_created_from_ads_ui,author_premium,thumbnail,edited,is_self,created,link_flair_type,wls,author_flair_type,domain,allow_live_comments,selftext_html,archived,no_follow,is_crosspostable,pinned,over_18,media_only,can_gild,spoiler,locked,visited,subreddit_id,author_is_blocked,link_flair_background_color,id,is_robot_indexable,num_comments,send_replies,whitelist_status,contest_mode,author_patreon_flair,permalink,parent_whitelist_status,stickied,url,subreddit_subscribers,created_utc,num_crossposts,is_video,_fetched,url_overridden_by_dest
2048,confidence,"The availability of language models such as GPT-3 (and the recent chat version #chatGPT) can be as disruptive as the search engines were in the past. New tools are good, in the sense that they can expand our productivity, but there can be some downsides. We have learned that not all we read on the internet is true, and the same goes for AI-generated content. This content can often be true, but it is produced to look plausible. Truth is often just an accident. 

One thing is true,  AI-generated content is very credible at first glance and hard to distinguish from human-generated content. Recently [Stack Overflow banned AI-generated content](https://www.theverge.com/2022/12/5/23493932/chatgpt-ai-generated-answers-temporarily-banned-stack-overflow-llms-dangers).  But how can we detect such content in an efficient way?

Probably the simplest solution is for the hosts of the language models, such as OpenAI, to store the outputs and provide search capability over past outputs.",t2_vfccj8,False,0,False,We need search capability over AI-generated content,r/compsci,False,6,0,False,t3_ze4umd,False,dark,0.93,public,132,0,False,False,False,False,132,False,False,,0.0,True,1670328176.0,text,6,text,self.compsci,True,"<!-- SC_OFF --><div class=""md""><p>The availability of language models such as GPT-3 (and the recent chat version #chatGPT) can be as disruptive as the search engines were in the past. New tools are good, in the sense that they can expand our productivity, but there can be some downsides. We have learned that not all we read on the internet is true, and the same goes for AI-generated content. This content can often be true, but it is produced to look plausible. Truth is often just an accident. </p>

<p>One thing is true,  AI-generated content is very credible at first glance and hard to distinguish from human-generated content. Recently <a href=""https://www.theverge.com/2022/12/5/23493932/chatgpt-ai-generated-answers-temporarily-banned-stack-overflow-llms-dangers"">Stack Overflow banned AI-generated content</a>.  But how can we detect such content in an efficient way?</p>

<p>Probably the simplest solution is for the hosts of the language models, such as OpenAI, to store the outputs and provide search capability over past outputs.</p>
</div><!-- SC_ON -->",False,False,False,False,False,False,False,False,False,False,t5_2qhmr,False,,ze4umd,True,22,True,all_ads,False,False,/r/compsci/comments/ze4umd/we_need_search_capability_over_aigenerated_content/,all_ads,False,https://www.reddit.com/r/compsci/comments/ze4umd/we_need_search_capability_over_aigenerated_content/,2148521,1670328176.0,1,False,False,
2048,confidence,,t2_3tmsj,False,0,False,"Normalization for multimodal type theory. ""We prove normalization for MTT, a general multimodal dependent type theory capable of expressing modal type theories for guarded recursion, internalized parametricity, and various other prototypical modal situations."" [abstract + link to PDF, 39pp]",r/compsci,False,6,0,False,t3_10osvvj,False,dark,0.95,public,107,0,False,False,False,False,107,False,True,,0.0,False,1675053547.0,text,6,text,arxiv.org,False,,False,False,False,False,False,False,False,False,False,False,t5_2qhmr,False,,10osvvj,True,19,False,all_ads,False,False,/r/compsci/comments/10osvvj/normalization_for_multimodal_type_theory_we_prove/,all_ads,False,https://arxiv.org/abs/2301.11842,2148521,1675053547.0,0,False,False,https://arxiv.org/abs/2301.11842
2048,confidence,,t2_1wbb,False,0,False,"Finally, a Fast Algorithm for Shortest Paths on Negative Graphs",r/compsci,False,6,0,False,t3_10fhtmd,False,dark,0.99,public,277,0,False,False,False,False,277,False,False,,0.0,False,1674073833.0,text,6,text,quantamagazine.org,True,,False,False,False,False,False,False,False,False,False,False,t5_2qhmr,False,,10fhtmd,True,18,True,all_ads,False,False,/r/compsci/comments/10fhtmd/finally_a_fast_algorithm_for_shortest_paths_on/,all_ads,False,https://www.quantamagazine.org/finally-a-fast-algorithm-for-shortest-paths-on-negative-graphs-20230118/,2148521,1674073833.0,0,False,False,https://www.quantamagazine.org/finally-a-fast-algorithm-for-shortest-paths-on-negative-graphs-20230118/
2048,confidence,"Alright, let's say I have an array of discrete 3D points that make a rectangle of x, y, and z length. I want to visit every point in the least amount of turns possible without backtracking. Let's say that to visit a point you can only increase x, y, and z by +-1 or 0. The pattern ends up being a snake-like pattern where the axis is traversed in descending order to minimize the number of turns. Though getting this to happen in code eloquently has been a real fucking bitch. 

So far, I've generated the area with no care in which order they're put in. Then I sort so the longest axis is moved through first, then I go through once and create subsets for every time two axis values have been changed (xChange && yChange) || (xChange && zChange) || (yChange && zChange) and add every one of those elements back to a new list where every other subset is in reverse order. Then I do that again but create a subset this time when every axis value has been changed (xChange && yChange && zChange). This cant be a novel problem, right? I can't find anything online about this.

Example input: https://pastebin.com/JbXx19rf
Example output: https://pastebin.com/sWsfXq3G",t2_6zswruuk,False,0,False,How do I traverse every point in a 3D area without backtracking and minimizing the least amount of turns possible?,r/compsci,False,6,0,False,t3_10z3ciy,False,dark,0.69,public,9,0,False,False,False,False,9,False,False,,1676064251.0,True,1676063859.0,text,6,text,self.compsci,False,"<!-- SC_OFF --><div class=""md""><p>Alright, let&#39;s say I have an array of discrete 3D points that make a rectangle of x, y, and z length. I want to visit every point in the least amount of turns possible without backtracking. Let&#39;s say that to visit a point you can only increase x, y, and z by +-1 or 0. The pattern ends up being a snake-like pattern where the axis is traversed in descending order to minimize the number of turns. Though getting this to happen in code eloquently has been a real fucking bitch. </p>

<p>So far, I&#39;ve generated the area with no care in which order they&#39;re put in. Then I sort so the longest axis is moved through first, then I go through once and create subsets for every time two axis values have been changed (xChange &amp;&amp; yChange) || (xChange &amp;&amp; zChange) || (yChange &amp;&amp; zChange) and add every one of those elements back to a new list where every other subset is in reverse order. Then I do that again but create a subset this time when every axis value has been changed (xChange &amp;&amp; yChange &amp;&amp; zChange). This cant be a novel problem, right? I can&#39;t find anything online about this.</p>

<p>Example input: <a href=""https://pastebin.com/JbXx19rf"">https://pastebin.com/JbXx19rf</a>
Example output: <a href=""https://pastebin.com/sWsfXq3G"">https://pastebin.com/sWsfXq3G</a></p>
</div><!-- SC_ON -->",False,True,False,False,False,False,False,False,False,False,t5_2qhmr,False,,10z3ciy,True,14,True,all_ads,False,False,/r/compsci/comments/10z3ciy/how_do_i_traverse_every_point_in_a_3d_area/,all_ads,False,https://www.reddit.com/r/compsci/comments/10z3ciy/how_do_i_traverse_every_point_in_a_3d_area/,2148521,1676063859.0,0,False,False,
